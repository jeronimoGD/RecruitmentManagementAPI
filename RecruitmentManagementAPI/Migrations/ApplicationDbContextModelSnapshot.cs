// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RecruitmentManagementAPI.Data;

#nullable disable

namespace RecruitmentManagementAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RecruitmentManagementAPI.Models.Entities.CSVDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CandidateId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RecruiterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId")
                        .IsUnique()
                        .HasFilter("[CandidateId] IS NOT NULL");

                    b.HasIndex("RecruiterId");

                    b.ToTable("CsvDocuments");
                });

            modelBuilder.Entity("RecruitmentManagementAPI.Models.Entities.Candidate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecruiterId")
                        .HasColumnType("int");

                    b.Property<string>("Rol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RecruiterId");

                    b.ToTable("Candidates");
                });

            modelBuilder.Entity("RecruitmentManagementAPI.Models.Entities.Recruiter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Recruiters");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationTime = new DateTime(2023, 11, 5, 21, 17, 46, 608, DateTimeKind.Utc).AddTicks(8603),
                            Email = "defaultRecruiter@gmail.com",
                            Name = "DefaultRecruiter",
                            Password = "password",
                            Rol = "recruiter",
                            UpdateTime = new DateTime(2023, 11, 5, 21, 17, 46, 608, DateTimeKind.Utc).AddTicks(8609)
                        });
                });

            modelBuilder.Entity("RecruitmentManagementAPI.Models.Entities.CSVDocument", b =>
                {
                    b.HasOne("RecruitmentManagementAPI.Models.Entities.Candidate", "CandidateCreator")
                        .WithOne("Document")
                        .HasForeignKey("RecruitmentManagementAPI.Models.Entities.CSVDocument", "CandidateId");

                    b.HasOne("RecruitmentManagementAPI.Models.Entities.Recruiter", "RecruiterCreator")
                        .WithMany("Documents")
                        .HasForeignKey("RecruiterId");

                    b.Navigation("CandidateCreator");

                    b.Navigation("RecruiterCreator");
                });

            modelBuilder.Entity("RecruitmentManagementAPI.Models.Entities.Candidate", b =>
                {
                    b.HasOne("RecruitmentManagementAPI.Models.Entities.Recruiter", "RecruiterCreator")
                        .WithMany("Candidates")
                        .HasForeignKey("RecruiterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RecruiterCreator");
                });

            modelBuilder.Entity("RecruitmentManagementAPI.Models.Entities.Candidate", b =>
                {
                    b.Navigation("Document");
                });

            modelBuilder.Entity("RecruitmentManagementAPI.Models.Entities.Recruiter", b =>
                {
                    b.Navigation("Candidates");

                    b.Navigation("Documents");
                });
#pragma warning restore 612, 618
        }
    }
}
